buildscript {
  repositories {
    google()
    mavenCentral()
    jcenter()
  }

  //
  // The magic below is needed to disable Google Mobile Services (a.k.a GMS) and
  // Google Firebase Services during the build time. Unfortunately, the only way
  // to disable Gradle plugins is to add these hardcore switches to buildscript().
  //

  // Detect flavors from the task name.
  def isFdroid = getGradle().getStartParameter().getTaskRequests().toString().toLowerCase().contains("fdroid");
  def isBeta = getGradle().getStartParameter().getTaskRequests().toString().toLowerCase().contains("beta");

  // Enable Google Mobile Services for all flavors except fdroid.
  def googleMobileServicesDefault = !isFdroid;
  // Add a parameter to force GMS.
  ext.googleMobileServicesEnabled = project.hasProperty('gms') ?: googleMobileServicesDefault;

  // Enable Firebase for all beta flavors except fdroid only if google-services.json exists.
  def googleFirebaseServicesDefault = isBeta && !isFdroid && file('google-services.json').exists();
  // Add a parameter to force Firebase.
  ext.googleFirebaseServicesEnabled = project.hasProperty('firebase') ?: googleFirebaseServicesDefault;

  dependencies {
    classpath 'com.android.tools.build:gradle:4.1.3'

    if (googleMobileServicesEnabled) {
      println("Building with Google Mobile Services")
      classpath 'com.google.gms:google-services:4.3.5'
    } else {
      println("Building without Google Services")
    }

    if (googleFirebaseServicesEnabled) {
      println("Building with Google Firebase Services")
      classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.1'
      classpath 'com.google.firebase:firebase-appdistribution-gradle:2.1.0'
    } else {
      println("Building without Google Firebase Services")
    }
  }
}

repositories {
  google()
  mavenCentral()
  jcenter()
  maven { url 'https://www.jitpack.io' } // MPAndroidChart
}

apply plugin: 'com.android.application'
apply from: 'secure.properties'
if (googleMobileServicesEnabled) {
  apply plugin: 'com.google.gms.google-services'
}
if (googleFirebaseServicesEnabled) {
  apply plugin: 'com.google.firebase.crashlytics'
  apply plugin: 'com.google.firebase.appdistribution'
}

dependencies {

  implementation 'androidx.multidex:multidex:' + propMultiDexVersion

  // Google Mobile Services
  if (googleMobileServicesEnabled) {
    implementation 'com.google.android.gms:play-services-location:17.0.0'
  }

  // Google Firebase Services
  if (googleFirebaseServicesEnabled) {
    implementation 'com.google.firebase:firebase-crashlytics:17.1.1'
    implementation 'com.google.firebase:firebase-crashlytics-ndk:17.1.1'
  }

  // 3-party
  implementation 'com.google.code.gson:gson:2.8.6'
  // BottomSheet
  implementation 'com.cocosw:bottomsheet:1.5.0@aar'
  implementation 'com.timehop.stickyheadersrecyclerview:library:0.4.3@aar'
  // Glide
  implementation 'com.github.bumptech.glide:glide:3.7.0'
  // Java concurrency annotations
  implementation 'net.jcip:jcip-annotations:1.0'

  implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
  implementation 'androidx.work:work-runtime:2.5.0'
  implementation 'com.trafi:anchor-bottom-sheet-behavior:0.13-alpha'
  implementation 'com.github.yoksnod:MPAndroidChart:3.2.0-alpha'
  implementation 'com.google.android.material:material:1.4.0-alpha02'
  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'androidx.preference:preference:1.1.1'
  implementation 'androidx.fragment:fragment:1.3.3'
  implementation 'androidx.recyclerview:recyclerview:1.2.0'
}

def run(cmd) {
  def stdout = new ByteArrayOutputStream()
  exec{
    commandLine = cmd
    standardOutput = stdout;
  }
  return stdout.toString()
}

def getVersion() {
  def gitsha = run(['git', 'rev-parse', '--short', 'HEAD']).trim()
  def time = Integer.parseInt(run(['git', 'log', '-1', '--format=%ct']).trim())
  def cal = Calendar.getInstance(Locale.ENGLISH);
  cal.setTimeInMillis((long) time * 1000);
  def year = cal.get(Calendar.YEAR);
  def month = cal.get(Calendar.MONTH) + 1;
  def day = cal.get(Calendar.DAY_OF_MONTH);
  def hour = cal.get(Calendar.HOUR_OF_DAY);

  // Use the current date to generate the version code:
  // RR_yy_MM_dd_HH
  // - RR - reserved to identify special markets, max value is 21.
  // - yy - year
  // - MM - month
  // - dd - day
  // - hh - hour
  // 21_00_00_00_00 is the the greatest value Google Play allows for versionCode.
  // See https://developer.android.com/studio/publish/versioning for details.
  def versionCode = (year - 2000) * 1_00_00_00 + month * 1_00_00 + day * 1_00 + hour;

  // Use the current date to generate the version name:
  // 2021.04.11-12-gae0bcb54f9-Google (-Google added by flavor)
  def versionName = String.format("%04d.%02d.%02d-%d-g%s", year, month, day, hour, gitsha)

  return new Tuple2(versionCode, versionName)
}

def osName = System.properties['os.name'].toLowerCase()

project.ext.appId = 'app.omaps'
project.ext.appName = 'Organic Maps'

android {
  buildFeatures {
    dataBinding = true
  }
  // All properties are read from gradle.properties file
  compileSdkVersion propCompileSdkVersion.toInteger()

  ndkVersion '21.4.7075529'

  defaultConfig {
    vectorDrawables.useSupportLibrary = true
    // Default package name is taken from the manifest and should be app.omaps
    def ver = getVersion();
    //println("Version:", versionName);
    //println("VersionCode:", versionCode);
    versionCode = ver.first
    versionName = ver.second
    minSdkVersion propMinSdkVersion.toInteger()
    targetSdkVersion propTargetSdkVersion.toInteger()
    applicationId project.ext.appId
    buildConfigField 'String', 'SUPPORT_MAIL', '"android@omaps.app"'
    buildConfigField 'String', 'REVIEW_URL', '"market://details?id=app.omaps"'
    buildConfigField 'int', 'RATING_THRESHOLD', '5'

    multiDexEnabled true
    multiDexKeepFile file('multidex-config.txt')

    externalNativeBuild {
      def pchFlag = 'OFF'
      if (project.hasProperty('pch')) pchFlag = 'ON'

      cmake {
        version '3.8.0+'
        cppFlags '-fexceptions', '-frtti'
        // There is no sense to enable sections without gcc's --gc-sections flag.
        cFlags '-fno-function-sections', '-fno-data-sections',
               '-Wno-extern-c-compat'
        arguments '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_static',
                  "-DOS=$osName", '-DSKIP_TESTS=ON', "-DUSE_PCH=$pchFlag"
      }
    }

    setProperty("archivesBaseName", appName.replaceAll("\\s","") + "-" + defaultConfig.versionCode)

    ndk {
      abiFilters = new HashSet<>()
      if (project.hasProperty('arm32') || project.hasProperty('armeabi-v7a')) {
        println('Building for armeabi-v7a')
        abiFilters.add('armeabi-v7a')
      } else if (project.hasProperty('arm64') || project.hasProperty('arm64-v8a')) {
        println('Building for arm64-v8a')
        abiFilters.add('arm64-v8a')
      } else if (project.hasProperty('x86_64')) {
        println('Building for x86_64')
        abiFilters.add('x86_64')
      } else if (project.hasProperty('x86')) {
        println('Building for x86')
        abiFilters.add('x86')
      } else {
        if (!project.hasProperty('splitApk')) {
          println('Building for armeabi-v7a, arm64-v8a, x86, x86_64')
          abiFilters.add('x86')
          abiFilters.add('x86_64')
          abiFilters.add('armeabi-v7a')
          abiFilters.add('arm64-v8a')
        }
      }
    }
  }

  sourceSets.main {
    manifest.srcFile 'AndroidManifest.xml'
    res.srcDirs = ['res']
    java.srcDirs = ['src']
    if (googleMobileServicesEnabled) {
      java.srcDirs += 'flavors/gms-enabled'
    } else {
      java.srcDirs += 'flavors/gms-disabled'
    }
    if (googleFirebaseServicesEnabled) {
      java.srcDirs += 'flavors/firebase-enabled'
    } else {
      java.srcDirs += 'flavors/firebase-disabled'
    }

    // assets folder is auto-generated by tools/android/update_assets.sh, so we keep all static resources in separate folders.
    assets.srcDirs = ['assets']
    jniLibs.srcDirs = [android.getNdkDirectory().toString() + '/sources/third_party/vulkan/src/build-android/jniLibs']
  }

  flavorDimensions "default"

  productFlavors {
    // See getVersion()
    final int HUAWEI_VERSION_CODE_BASE = 01_00_00_00_00
    final int TENCENT_VERSION_CODE_BASE = 02_00_00_00_00

    google {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Google'
      buildConfigField 'String', 'SUPPORT_MAIL', '"googleplay@omaps.app"'
      android.sourceSets.google.assets.srcDirs = ['flavors/world-enabled']
    }

    samsung {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Samsung'
      buildConfigField 'String', 'REVIEW_URL', '"samsungapps://ProductDetail/app.omaps"'
      buildConfigField 'String', 'SUPPORT_MAIL', '"samsung@omaps.app"'
      android.sourceSets.samsung.assets.srcDirs = ['flavors/world-enabled']
    }

    amazon {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Amazon'
      buildConfigField 'String', 'REVIEW_URL', '"amzn://apps/android?p=app.omaps"'
      buildConfigField 'String', 'SUPPORT_MAIL', '"amazon@omaps.app"'
      buildConfigField 'int', 'RATING_THRESHOLD', '4'
      android.sourceSets.amazon.assets.srcDirs = ['flavors/world-enabled']
    }

    yandex {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Yandex'
      buildConfigField 'String', 'REVIEW_URL', '"yastore://details?id=app.omaps"'
      android.sourceSets.yandex.assets.srcDirs = ['flavors/world-enabled']
    }

    preinstall {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Preinstall'
      buildConfigField 'String', 'SUPPORT_MAIL', '"googleplay@omaps.app"'
    }

    cipherlab {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-CipherLab'
      android.sourceSets.cipherlab.assets.srcDirs = ['flavors/world-enabled']
    }

    xiaomi {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Xiaomi'
      buildConfigField 'String', 'REVIEW_URL', '"http://app.mi.com/detail/85835?ref=search"'
      android.sourceSets.xiaomi.assets.srcDirs = ['flavors/world-enabled']
    }

    lenovo {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Lenovo'
      android.sourceSets.lenovo.assets.srcDirs = ['flavors/world-enabled']
    }

    web {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Web'
      buildConfigField 'String', 'SUPPORT_MAIL', '"apk@omaps.app"'
      //android.sourceSets.web.assets.srcDirs = ['flavors/world-enabled']
    }

    fdroid {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-FDroid'
      buildConfigField 'String', 'SUPPORT_MAIL', '"fdroid@omaps.app"'
      //android.sourceSets.fdroid.assets.srcDirs = ['flavors/world-enabled']
    }

    nineApp {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-9app'
      buildConfigField 'String', 'REVIEW_URL', '"http://www.9apps.com/android-apps/mapswithme-maps-pro/"'
      android.sourceSets.nineApp.assets.srcDirs = ['flavors/world-enabled']
    }

    mobogenie {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Mobogenie'
      android.sourceSets.mobogenie.assets.srcDirs = ['flavors/world-enabled']
      buildConfigField 'String', 'REVIEW_URL', '"http://www.mobogenie.com/download-maps-me-4240212.html"'
    }

    tencent {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Tencent'
      versionCode TENCENT_VERSION_CODE_BASE + android.defaultConfig.versionCode
      android.sourceSets.tencent.assets.srcDirs = ['flavors/world-enabled']
      buildConfigField 'String', 'REVIEW_URL', '"http://android.myapp.com/myapp/detail.htm?apkName=app.omaps"'
    }

    baidu {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Baidu'
      android.sourceSets.baidu.assets.srcDirs = ['flavors/world-enabled']
      buildConfigField 'String', 'REVIEW_URL', '"http://shouji.baidu.com/software/item?docid=7999892&f=sug@software"'
    }

    appChina {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-AppChina'
      android.sourceSets.appChina.assets.srcDirs = ['flavors/world-enabled']
      buildConfigField 'String', 'REVIEW_URL', '"http://www.appchina.com/app/app.omaps"'
    }

    moboMarket {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-MoboMarket'
      android.sourceSets.moboMarket.assets.srcDirs = ['flavors/world-enabled']
      // TODO While store url is unknown, force all rating reviews to be sent to our email.
      // Change it in the next version after publishing app to the store.
      buildConfigField 'int', 'RATING_THRESHOLD', '6'
    }

    blackberry {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Blackberry'
      android.sourceSets.blackberry.assets.srcDirs = ['flavors/world-enabled']
      buildConfigField 'String', 'REVIEW_URL', '"https://appworld.blackberry.com/webstore/content/51013892"'
    }

    huawei {
      dimension "default"
      versionName = android.defaultConfig.versionName + '-Huawei'
      versionCode = HUAWEI_VERSION_CODE_BASE + android.defaultConfig.versionCode
      buildConfigField 'String', 'SUPPORT_MAIL', '"huawei@omaps.app"'
      android.sourceSets.huawei.assets.srcDirs = ['flavors/world-enabled']
    }
  }

  variantFilter { variant ->
    if (!variant.getFlavors().get(0).name.equals("web")
            && !variant.getFlavors().get(0).name.equals("google")
            && !variant.getFlavors().get(0).name.equals("fdroid")
            && !project.hasProperty("anyVariant")) {
      variant.setIgnore(true)
    }
  }

  splits.abi {
    boolean enabled = project.hasProperty('splitApk')
    println ("Create separate apks: " + enabled)
    enable enabled
    reset()
    include 'x86', 'armeabi-v7a', 'arm64-v8a', 'x86_64'
    universalApk true
  }

  // TODO: Fix a lot of lint errors in our code
  lintOptions {
    abortOnError false
  }

  gradle.projectsEvaluated {
    android.applicationVariants.all { variant ->
      def task = variant.name.capitalize()
      project.task(type: Exec, "run${task}", dependsOn: "install${task}") {
        commandLine android.getAdbExe(), 'shell', 'am', 'start', '-n', "${applicationId}/com.mapswithme.maps.SplashActivity"
      }
    }
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword '12345678'
      keyAlias 'debug'
      keyPassword '12345678'
    }

    release {
      storeFile file(spropStoreFile)
      storePassword spropStorePassword
      keyAlias spropKeyAlias
      keyPassword spropKeyPassword
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'   // Allows to install debug and release builds together
      versionNameSuffix '-debug'
      jniDebuggable true           // Enable jni debug build
      zipAlignEnabled true
      signingConfig signingConfigs.debug
      resValue 'string', 'app_id', android.defaultConfig.applicationId + applicationIdSuffix
      resValue 'string', 'app_name', project.ext.appName  + ' ' + '(Debug)'
      ndk.debugSymbolLevel = 'SYMBOL_TABLE'
    }

    release {
      signingConfig signingConfigs.release
      minifyEnabled true
      shrinkResources true
      proguardFile('proguard-mwm.txt')
      resValue 'string', 'app_id', android.defaultConfig.applicationId
      resValue 'string', 'app_name', project.ext.appName
      ndk.debugSymbolLevel = 'SYMBOL_TABLE'
      if (googleFirebaseServicesEnabled) {
        firebaseCrashlytics {
          nativeSymbolUploadEnabled true
        }
      }
    }

    beta {
      applicationIdSuffix '.beta'
      versionNameSuffix '-beta'
      signingConfig signingConfigs.release
      matchingFallbacks = ['debug', 'release']
      resValue 'string', 'app_id', android.defaultConfig.applicationId + applicationIdSuffix
      resValue 'string', 'app_name', project.ext.appName + ' ' + '(Beta)'
      ndk.debugSymbolLevel = 'SYMBOL_TABLE'
      if (googleFirebaseServicesEnabled) {
        firebaseCrashlytics {
          nativeSymbolUploadEnabled true
        }
        firebaseAppDistribution {
          releaseNotesFile = "RELEASE"
          groups = "android-qa"
          apkPath = "./build/outputs/apk/web/beta/" + appName.replaceAll("\\s","") + "-" + defaultConfig.versionCode + "-web-beta.apk"
          serviceCredentialsFile = "firebase-app-distribution.json"
        }
      }
    }
  }

  externalNativeBuild {
    cmake {
      version "3.8.0+"
      buildStagingDirectory "./nativeOutputs"
      path "../CMakeLists.txt"
    }
  }

  // We don't compress these extensions in assets/ because our random FileReader can't read zip-compressed files from apk.
  // TODO: Load all minor files via separate call to ReadAsString which can correctly handle compressed files in zip containers.
  aaptOptions {
    noCompress 'txt', 'bin', 'html', 'png', 'json', 'mwm', 'ttf', 'sdf', 'ui', 'config', 'csv', 'spv'
    ignoreAssetsPattern "!.svn:!.git:!.DS_Store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'lib/armeabi/libcrashlytics.so'
    exclude 'lib/mips64/libcrashlytics.so'
    exclude 'lib/mips/libcrashlytics.so'
    exclude 'lib/armeabi/libVkLayer_core_validation.so'
    exclude 'lib/armeabi/libVkLayer_threading.so'
    exclude 'lib/armeabi/libVkLayer_image.so'
    exclude 'lib/armeabi/libVkLayer_parameter_validation.so'
    exclude 'lib/armeabi/libVkLayer_object_tracker.so'
    exclude 'lib/armeabi/libVkLayer_swapchain.so'
    exclude 'lib/armeabi/libVkLayer_unique_objects.so'
    exclude 'lib/mips64/libVkLayer_core_validation.so'
    exclude 'lib/mips64/libVkLayer_threading.so'
    exclude 'lib/mips64/libVkLayer_image.so'
    exclude 'lib/mips64/libVkLayer_parameter_validation.so'
    exclude 'lib/mips64/libVkLayer_object_tracker.so'
    exclude 'lib/mips64/libVkLayer_swapchain.so'
    exclude 'lib/mips64/libVkLayer_unique_objects.so'
    exclude 'lib/mips/libVkLayer_core_validation.so'
    exclude 'lib/mips/libVkLayer_threading.so'
    exclude 'lib/mips/libVkLayer_image.so'
    exclude 'lib/mips/libVkLayer_parameter_validation.so'
    exclude 'lib/mips/libVkLayer_object_tracker.so'
    exclude 'lib/mips/libVkLayer_swapchain.so'
    exclude 'lib/mips/libVkLayer_unique_objects.so'
  }
}

// Tasks needed to compile NDK part
apply plugin: 'base'

project.ext.PARAM_PARALLEL_TASK_COUNT = '-j' + (Runtime.runtime.availableProcessors() + 1)
project.ext.NDK_BUILD = android.getNdkDirectory().toString() + '/ndk-build'
if (System.properties['os.name'].toLowerCase().contains('windows'))
  project.ext.NDK_BUILD += ".cmd"

android.buildTypes.all { buildType ->
  def suffix = applicationIdSuffix != null ? applicationIdSuffix : ""
  def authorityValue = android.defaultConfig.applicationId + suffix + ".provider"
  def authority = "\"" + authorityValue + "\""
  buildConfigField 'String', 'FILE_PROVIDER_AUTHORITY', authority
  manifestPlaceholders += [FILE_PROVIDER_PLACEHOLDER : authorityValue]
}
