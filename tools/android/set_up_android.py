#!/usr/bin/python
import os, sys, shutil, collections
from optparse import OptionParser

# Fix for python 2
try:
  input = raw_input
except NameError:
  pass

def find_recursive(root, subpath, maxdepth=4):
  queue = collections.deque([(root, 0)])
  if 'PATH' in os.environ:
    envpath = os.environ['PATH'].split(':')
    relpath = ['..'] * (len(subpath) - 1)
    queue.extendleft([(os.path.join(x, *relpath), maxdepth) for x in envpath if 'android' in x.lower()])
  while len(queue) > 0:
    item = queue.popleft()
    if os.path.isfile(os.path.join(item[0], *subpath)):
      return os.path.abspath(item[0])
    if item[1] < maxdepth:
      for name in os.listdir(item[0]):
        fullname = os.path.join(item[0], name)
        if os.path.isdir(fullname) and '.' not in name:
          queue.append((fullname, item[1] + 1))
  return None

def read_local_properties():
  androidRoot = os.path.join(os.path.dirname(sys.argv[0]), '..', '..', 'android')
  propsFile = os.path.join(androidRoot, 'local.properties')
  sdkDir = None
  if os.path.exists(propsFile):
    with open(propsFile, 'r') as f:
      for line in f:
        line = line.strip()
        if line.startswith('sdk.dir') and '=' in line:
          sdkDir = line.split('=')[1].strip()
  return sdkDir

def query_path(title, option, default, subpath):
  default = '' if not default else os.path.abspath(default)
  searchHint = ', "s" to search'
  while True:
    path = input('Path to {0}{1} [{2}]:'.format(title, searchHint, default)) or default
    if len(searchHint) > 0 and path.lower().strip() == 's':
      found = find_recursive(os.path.expanduser('~'), subpath)
      if found:
        default = found
      searchHint = ''
    else:
      break
  test = os.path.join(path, *subpath)
  if path and os.path.isfile(test):
    return os.path.abspath(path)
  else:
    print('Could not find {0}, not an {1} path.'.format(test, title))
    sys.exit(1)

def write_local_properties(sdkDir):
  content = ''.join([x + '\n' for x in [
      '# Autogenerated file',
      '# Do not add it to version control',
      'sdk.dir={0}'.format(sdkDir),
  ]])

  # Create omim/android/local.properties
  androidRoot = os.path.join(os.path.dirname(sys.argv[0]), '..', '..', 'android')
  propsFile = os.path.join(androidRoot, 'local.properties')
  print('Writing {0}'.format(propsFile))
  with open(propsFile, 'w') as f:
    f.write(content)

  # Copy files to folders
  for folder in []:
    destFolder = os.path.join(androidRoot, folder)
    if not os.path.exists(destFolder):
      os.makedirs(destFolder)
    dst = os.path.join(destFolder, 'local.properties')
    print('Copying to {0}'.format(dst))
    shutil.copy(propsFile, dst)

if __name__ == '__main__':
  parser = OptionParser()
  parser.add_option('-s', '--sdk', help='Path to Android SDK')
  options, _ = parser.parse_args()

  sdkDir = options.sdk

  if not options.sdk:
    sdkDirOld = read_local_properties()
    if not sdkDir:
      sdkDir = sdkDirOld
    sdkDir = query_path('Android SDK', options.sdk, sdkDir, ['platform-tools', 'adb'])

  write_local_properties(sdkDir)
